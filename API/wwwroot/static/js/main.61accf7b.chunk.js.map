{"version":3,"sources":["models/activity.ts","models/pagination.ts","app/api/agent.ts","models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivitiyDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/dtails/ActivityDetailedChat.tsx","features/activities/dtails/ActivityDetailedHeader.tsx","features/activities/dtails/ActivityDetailedInfo.tsx","features/activities/dtails/ActivityDetailedSidebar.tsx","features/activities/dtails/ActivityDetails.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileFollowing.tsx","app/common/imageUpload/PhotoWidgetDropZone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/UserActivities.tsx","features/profiles/PorfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["Activity","init","Object","assign","this","ActivityFormValues","activity","id","undefined","title","date","description","venue","city","category","PaginatedResult","data","pagination","PagingParams","pageNumberr","pageSize","pageNumber","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","url","get","then","body","post","put","delete","agent","Activities","list","params","details","create","update","attend","Account","current","login","user","register","Profiles","username","uplaodPhoto","file","formData","FormData","append","setMain","deletePhoto","updateFollowing","getFollowings","predicate","listActivity","Profile","displayName","image","ActivityStore","selectedActivity","activityRegistry","Map","editMode","loading","submitting","loadingInitial","pagingParams","set","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","state","setPagingParams","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","attendee","isHost","hostUsername","host","find","Date","createActivity","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","URLSearchParams","toString","toISOString","ProfileStore","profile","loadingProfile","uploadingPhoto","loadingPhoto","followings","loadingFollowing","activeTab","userActivities","loadingActivities","setActiveTab","tabIndex","loadProfile","uploadPhoto","photo","photos","isMain","setImage","p","activityStore","followingsCount","loadFollowings","loadUserActivities","getAxiosParams","UserStore","creds","setToken","modalStore","closeModal","logout","getUser","window","localStorage","getItem","appLoaded","setAppLoaded","setItem","removeItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","e","preventDefault","handleFollow","basic","Card","Header","Description","extra","Icon","FollowButton","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","SegmentGroup","Segment","Label","attached","textAlign","ItemGroup","marginBottom","secondary","clearing","floated","groupedAcivities","group","sub","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","Group","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","placeholderText","showTimeSelect","timeCaption","dateFormat","rows","border","Comment","resetForm","onKeyPress","shiftKey","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","TestErrors","setError","widths","baseUrl","primary","Notfound","Inline","message","Modal","onClose","Tab","Pane","itemsPerRow","PhotoWidgetDropzone","setFile","dzStyle","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","GridColumn","currentTarget","handleSetMainPhoto","handleSetDeletePhoto","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChanging","objectFit","Meta","menuPosition","Statistic","Divider","PrivateRoute","Componet","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","margin","ActivityDashboard","ActivitiesDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.61accf7b.chunk.js","sourcesContent":["import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n  'id': string;\r\n  'title': string;\r\n  'date': Date | null;\r\n  'description': string;\r\n  'venue': string;\r\n  'city': string;\r\n  'category': string;\r\n  'hostUsername': string;\r\n  'isCancelled': boolean;\r\n  'isGoing': boolean;\r\n  'isHost': boolean;\r\n  'host'?: Profile;\r\n  'attendees': Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n  constructor(init?:ActivityFormValues) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n  id?: string = undefined;\r\n  title: string = '';\r\n  date: Date | null = null;\r\n  description: string = '';\r\n  venue: string = '';\r\n  city: string = '';\r\n  category: string = '';\r\n\r\n  constructor(activity?: ActivityFormValues) {\r\n    if (activity) {\r\n      this.id = activity.id;\r\n      this.title = activity.title;\r\n      this.date = activity.date;\r\n      this.description = activity.description;\r\n      this.venue = activity.venue;\r\n      this.city = activity.city;\r\n      this.category = activity.category;\r\n    }\r\n  }\r\n}","export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber = 1;\r\n    pageSize = 5;\r\n\r\n    constructor(pageNumberr = 1, pageSize = 5) {\r\n        this.pageNumber = pageNumberr;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, {AxiosError, AxiosResponse} from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../../models/activity';\r\nimport { PaginatedResult } from '../../models/pagination';\r\nimport { Profile, UserActivity } from '../../models/profile';\r\nimport { User, UserFormValues } from '../../models/user';\r\nimport { store } from '../stores/store';\r\n\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\n// axios.interceptors.response.use((response) => {\r\n//     return sleep(1000).then(() => {\r\n//         return response\r\n//     }).catch((error) => {\r\n//         console.log(error);\r\n//         return Promise.reject(error);\r\n//     })\r\n// })\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async (response) => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof(data) === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors?.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = []\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]){\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found')\r\n            toast.error('not found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst request = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n        .then(responseBody),\r\n    details: (id: string) => request.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => request.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => request.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => request.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => request.post<void>(`/activities/${id}/attend`, {}),\r\n}\r\n\r\nconst Account = {\r\n    current: () => request.get<User>('./account'),\r\n    login: (user: UserFormValues) => request.post<User>('./account/login', user),\r\n    register: (user: UserFormValues) => request.post<User>('./account/register', user),\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => request.get<Profile>(`/profiles/${username}`),\r\n    uplaodPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMain: (id: string) => request.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => request.del(`/photos/${id}`),\r\n    updateFollowing: (username: string) => request.post(`/follow/${username}`, {}),\r\n    getFollowings: (username: string, predicate: string) =>\r\n        request.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivity: (username: string, params: URLSearchParams) =>\r\n        axios.get<UserActivity[]>(`/profiles/${username}/activities`, {params}).then(responseBody),\r\n    \r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingsCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    category: string;\r\n    title: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from 'mobx';\r\nimport { Activity, ActivityFormValues } from '../../models/activity';\r\nimport agent from '../api/agent';\r\nimport {format} from 'date-fns';\r\nimport { store } from './store';\r\nimport { Profile } from '../../models/profile';\r\nimport { Pagination, PagingParams } from '../../models/pagination';\r\n\r\nexport default class ActivityStore {\r\n    // activities: Activity[] = [];\r\n    selectedActivity: Activity | undefined = undefined;\r\n    activityRegistry = new Map<string, Activity>();\r\n    editMode = false;\r\n    loading = false;\r\n    submitting = false;\r\n    loadingInitial = true;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \r\n        a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedAcivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ?\r\n                    [...activities[date], activity] : [activity]\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n            //}, <{[key: string]: Activity[]}>{}) //use type casting to declare type\r\n        )\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (predicate !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch(predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', value);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', value);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', value);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach((activity) => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false); //make it a function rather than manipulating a property in async\r\n        } catch(error) {\r\n            console.log(error)\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n    \r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            // this.setLoadingInitial(false);\r\n            return activity\r\n        } else {\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() =>{\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity\r\n            } catch(error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees?.some(attendee =>\r\n                attendee.username === user.username)\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(attendee => \r\n                attendee.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity)\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity} as Activity;\r\n                    this.activityRegistry.set(activity.id, updatedActivity);\r\n                    this.selectedActivity = updatedActivity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id)\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity?.attendees?.filter(attendee =>\r\n                            attendee.username !== user?.username);\r\n                    this.selectedActivity!.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                        this.selectedActivity?.attendees?.push(attendee);\r\n                        this.selectedActivity!.isGoing = true;\r\n                }\r\n            })\r\n            this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport { Photo, Profile, UserActivity } from \"../../models/profile\";\r\nimport agent from \"../api/agent\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploadingPhoto = false;\r\n    loadingPhoto = false;\r\n    followings: Profile[] = [];\r\n    loading = false;\r\n    loadingFollowing = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'followings';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (tabIndex: any) => {\r\n        this.activeTab = tabIndex;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => this.profile = profile);\r\n            \r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploadingPhoto = true;\r\n        try {\r\n            const response = await agent.Profiles.uplaodPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile?.photos?.push(photo)\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n            });\r\n        } catch(error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => this.uploadingPhoto = false);\r\n        }\r\n    }\r\n\r\n    setMain = async (photo: Photo) => {\r\n        this.loadingPhoto = true;\r\n        try {\r\n            await agent.Profiles.setMain(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loadingPhoto = false;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingPhoto = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loadingPhoto = true;\r\n        try {\r\n            if (this.profile && !photo.isMain) await agent.Profiles.deletePhoto(photo.id);\r\n            this.profile!.photos = this.profile?.photos?.filter(p => p.id !== photo.id);\r\n        } catch(error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loadingPhoto = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile\r\n                    && this.profile.username !== store.userStore.user?.username\r\n                    && this.profile.username === username) {\r\n                    following ? this.profile.followersCount-- : this.profile.followersCount++;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingsCount-- : this.profile.followingsCount++;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowing = true;\r\n        try {\r\n            const followings = await agent.Profiles.getFollowings(this.profile!.username, predicate);\r\n            runInAction(() => this.followings = followings);\r\n        } catch(error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loadingFollowing = false);\r\n        }\r\n    }\r\n\r\n    getAxiosParams(predicate: string) {\r\n        const params = new URLSearchParams();\r\n        switch (predicate) {\r\n            case 'past':\r\n                params.append('endDate', (new Date()).toISOString());\r\n                break;\r\n            case 'future':\r\n                params.append('startDate', (new Date()).toISOString());\r\n                break;\r\n            case 'hosting':\r\n                params.append('isHost', 'true');\r\n                break;\r\n        }\r\n        return params;\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivity(username, this.getAxiosParams(predicate));\r\n            runInAction(() => this.userActivities = activities);\r\n        } catch(error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loadingActivities = false);\r\n        }\r\n    }\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport { User, UserFormValues } from \"../../models/user\";\r\nimport agent from \"../api/agent\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !! this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds)\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            store.activityStore.loadActivities();\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        runInAction(() => this.user = null);\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds)\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore(),\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null; // no const/let/var\r\n    token: string | null = window.localStorage.getItem('jwt');  // first load, no reaction\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction( // then react to change\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n        // if (token) window.localStorage.setItem('jwt', token);\r\n        // else window.localStorage.removeItem('jwt');\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null; // interface use | for or\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { ChatComment } from \"../../models/comment\";\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { store } from \"./store\";\r\n\r\nconst chatUrl = process.env.REACT_APP_CHAT_URL\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(`${chatUrl}?activityId=${activityId}`, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments;\r\n                });\r\n            })\r\n            this.hubConnection.on('ReceivedComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stoping connection', error));\r\n    }\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (value: any) => {\r\n        value.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            console.log('value', value)\r\n            await this.hubConnection?.invoke('SendComment', value);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: {user, logout} } = useStore();\r\n\r\n    return (\r\n        <Menu inverted fixed=\"top\">\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: 10}} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item name=\"Activities\" as={NavLink} to='/activities' />\r\n                <Menu.Item name=\"Errors\" as={NavLink} to='/errors' />\r\n                <Menu.Item>\r\n                    <Button positive content=\"Create Activity\" as={NavLink} to='/createActivity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item\r\n                                as={Link}\r\n                                to={`/profiles/${user?.username}`}\r\n                                text='My Profile' icon='user'\r\n                            />\r\n                            <Dropdown.Item text='logout' icon='power' onClick={logout} />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { Profile } from '../../models/profile';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function FollowingButton({profile}: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        updateFollowing(username, !!profile.following);\r\n    }\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{width: '100%'}}>\r\n                <Button\r\n                    fluid\r\n                    color='teal'\r\n                    content={profile.following ? 'Following' : 'Not following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{width: '100%'}}>\r\n                <Button\r\n                    onClick={e => handleFollow(e, profile.username)}\r\n                    fluid\r\n                    basic\r\n                    loading={loading}\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props) {\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>Bio goes here</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { List, Image, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({attendees} : Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 2\r\n    }\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map((attendee) => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image\r\n                                size='mini'\r\n                                circular\r\n                                bordered\r\n                                src={attendee.image || `/assets/user.png`}\r\n                                style={attendee.following ? styles : null} />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content style={{width: 150}} >\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, ItemGroup, Label, Segment, SegmentGroup } from 'semantic-ui-react';\r\nimport { Activity } from '../../../models/activity';\r\nimport {format} from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props) {\r\n\r\n    return (\r\n        <SegmentGroup>\r\n            <Segment>\r\n                {activity.isCancelled && (\r\n                    <Label attached='top' color='red'  content='Cancelled' style={{textAlign: 'center'}} />\r\n                )}\r\n                <ItemGroup>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 4}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>You are hosting this activity</Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {!activity.isHost && activity.isGoing && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>You are going to this activity</Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </ItemGroup>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy hh:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} /> \r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </SegmentGroup>\r\n    )\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const {activityStore} = useStore();\r\n    const {groupedAcivities} = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedAcivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map((activity) => \r\n                        <ActivityListItem key={activity.id} activity={activity}/>\r\n                    )}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{width: '100%', marginTop: 25}}>\r\n                <Header icon='filter' attached color='teal' content='Filters'></Header>\r\n                <Menu.Item\r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content='I am going'\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content='I am hosting'\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header>\r\n                <Calendar\r\n                    onChange={(date) => setPredicate('startDate', date as Date)}\r\n                    value={predicate.get('startDate') || new Date()}\r\n                />\r\n            </Header>\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityList from './ActivityList';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport { PagingParams } from '../../../models/pagination';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const {activityStore} = useStore();\r\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities]) // activityStore as depandancy\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={\r\n                            !loadingNext\r\n                            && !!pagination\r\n                            && pagination.currentPage < pagination.totalPages\r\n                        }\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width='10'>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})\r\n","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    \r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error \r\n                ? (<Label basic color='red' content={meta.error} />)\r\n                : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: 'Invalid email or password'}))}\r\n        >\r\n             {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error'\r\n                        render={() => \r\n                            <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup'\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error: error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n             {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='DisplayName' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error'\r\n                        render={() => \r\n                            // <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />\r\n                            <ValidationErrors errors={errors.error} />\r\n                        }\r\n                    />\r\n                    <Button\r\n                        disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting}\r\n                        positive\r\n                        content='Register'\r\n                        type='submit'\r\n                        fluid\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Segment, Image, Header, Button } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n\r\n    return (\r\n        <Segment inverted className='masthead'>\r\n            <Segment textAlign='center' vertical style={{width:'100%'}}>\r\n                <Container>\r\n                    <Header as='h1' inverted>\r\n                        <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\r\n                        Reactivities\r\n                    </Header>\r\n                    {userStore.isLoggedIn\r\n                    ? (\r\n                        <>\r\n                            <Header as='h2' inverted content='Welcom to the Reactivities' />\r\n                            <Button as={Link} to='/activities' size='huge' inverted>\r\n                                Go to activities\r\n                            </Button>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                                Login\r\n                            </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                                Register\r\n                            </Button>\r\n                        </>\r\n                    )}\r\n                </Container>\r\n                \r\n            </Segment>\r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    \r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error \r\n                ? (<Label basic color='red' content={meta.error} />)\r\n                : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    \r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e: any, d: any) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder} />\r\n            {meta.touched && meta.error \r\n                ? (<Label basic color='red' content={meta.error} />)\r\n                : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    \r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error \r\n                ? (<Label basic color='red' content={meta.error} />)\r\n                : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, {useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup'; \r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../models/activity';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const {createActivity, updateActivity, loadActivity, loadingInitial, setLoadingInitial} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('You need to inpt title'),\r\n        date: Yup.string().required('Please select a time').nullable(),\r\n        description: Yup.string().required(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n        category: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n        } else {\r\n            setLoadingInitial(false);\r\n        }\r\n            \r\n    }, [id, loadActivity, setLoadingInitial]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            }\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading Activityt...' />\r\n \r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        {/* <FormField>\r\n                            <Field placeholder='Title' name='title'/>\r\n                            <ErrorMessage name='title'\r\n                                render={error => <Label basic color='red' content={error} />} />\r\n                        </FormField> */}\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput\r\n                            placeholderText='date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa' />\r\n                        <MyTextArea rows={3} placeholder='description' name='description' />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='venue' name='venue' />\r\n                        <MyTextInput placeholder='city' name='city' />\r\n                        <Button\r\n                            disabled={!isValid || isSubmitting || !dirty}\r\n                            loading={isSubmitting}\r\n                            floated='right'\r\n                            positive\r\n                            type='submit'\r\n                            content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) commentStore.createHubConnection(activityId);\r\n        return () => commentStore.clearComments();\r\n    }, [commentStore, activityId])\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Comment.Group>\r\n                    <Formik\r\n                        onSubmit={(value, {resetForm}) => \r\n                            commentStore.addComment(value).then(() => resetForm)}\r\n                        initialValues={{body: ''}}\r\n                        validationSchema={Yup.object({\r\n                            body: Yup.string().required()\r\n                        })}\r\n                    >\r\n                        {({isSubmitting, isValid, handleSubmit}) => (\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div style={{position: 'relative'}}>\r\n                                            <Loader active={isSubmitting} />\r\n                                            <textarea\r\n                                                placeholder='Type your comment (Enter to submit, Enter + Shift for new line)'\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={e => {\r\n                                                    if (e.key === 'Enter' && e.shiftKey) {\r\n                                                        return;\r\n                                                    }\r\n                                                    if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profile/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)}</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label, ItemContent} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && (\r\n                    <Label\r\n                        style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}}\r\n                        ribbon color='red' content='Cancelled' />\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Header\r\n                        size='huge'\r\n                        content={activity.title}\r\n                        style={{color: 'white'}}\r\n                    />\r\n                    <p>{format(activity.date!, 'dd MMM yyyy hh:mm aa')}</p>\r\n                    <p>\r\n                        Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                    </p>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost && (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button\r\n                            disabled={activity.isCancelled}\r\n                            as={Link}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                )}\r\n                {!activity.isHost && activity.isGoing && (\r\n                    <Button loading={loading} onClick={updateAttendance} floated='right'>Cancel attendance</Button>\r\n                )}\r\n                {!activity.isHost && !activity.isGoing && (\r\n                    <Button\r\n                        disabled={activity.isCancelled}\r\n                        loading={loading}\r\n                        onClick={updateAttendance}\r\n                        color='teal'>\r\n                        Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../models/activity\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy hh:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({activity: {attendees, host}}: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'person' : 'people'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username && (\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            )}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following && (\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                                )}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nexport default observer(function ActivitiesDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n    \r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                <ActivityDetailedHeader activity={activity}/>\r\n                <ActivityDetailedInfo activity={activity}/>\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL\r\n    const [error, setError] = useState();\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setError(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {error && (\r\n                <ValidationErrors errors={error} />\r\n            )}\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function Notfound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Opps - we've looked everywhere and counld not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' >\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='ServerError' />\r\n            <Header sub as='h5' color='red' content={commonStore?.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal'></Header>\r\n                    <code style={{marginTop: 10}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>{modalStore.modal.body}</Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowing() {\r\n    const {profileStore:{ loadingFollowing, profile, followings, activeTab }} = useStore();\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowing}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3\r\n                            ? `People following ${profile?.displayName}`\r\n                            : `People ${profile?.displayName} following`\r\n                        }\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(following => (\r\n                            <ProfileCard key={following?.username} profile={following} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFile: (file: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFile}: Props) {\r\n\r\n  const dzStyle = {\r\n    border: 'dashed 3px #eee',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '40px',\r\n    textAlign: 'center' as 'center',\r\n    height: 200\r\n  }\r\n\r\n  const dzActive = {\r\n    borderColor: 'green'\r\n  }\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFile(acceptedFiles.map((file: any) => Object.assign(file, {\r\n      preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFile])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyle, ...dzActive} : dzStyle}>\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop file here' />\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height:200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropZone';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFile] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>()\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview) );\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={5}>\r\n                <Header color='teal' content='Step 1 - Add Photos' />\r\n                <PhotoWidgetDropzone setFile={setFile} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <Header color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={5}>\r\n                <Header color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 && (\r\n                    <>\r\n                        <div className='img-preview' style={{minHeight: 200, width: '100%', overflow: 'hidden'}} />\r\n                        <Button.Group size='tiny' style={{width: 200}}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFile([])}  icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Button, Card, Grid, GridColumn, Header, Image, Tab } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { Photo, Profile } from '../../models/profile';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile}: Props) {\r\n    const {profileStore: {isCurrentUser, uploadPhoto, uploadingPhoto, setMain, deletePhoto, loadingPhoto}} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e:SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMain(photo);\r\n    } // to get conlick button name\r\n\r\n    function handleSetDeletePhoto(photo: Photo, e:SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <GridColumn width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </GridColumn>\r\n                <GridColumn width={16}>\r\n                    {addPhotoMode ? (\r\n                            <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploadingPhoto}/>\r\n                        ) : (\r\n                            <Card.Group itemsPerRow={5}>\r\n                                {profile.photos?.map((photo) => (\r\n                                    <Card key={photo.id}>\r\n                                        <Image src={photo.url} />\r\n                                        {isCurrentUser && (\r\n                                            <Button.Group fluid widths={2}>\r\n                                                <Button\r\n                                                    basic\r\n                                                    color='green'\r\n                                                    content='Main'\r\n                                                    name={'setMain'+photo.id}\r\n                                                    disabled={loadingPhoto || photo.isMain}\r\n                                                    loading={target==='setMain'+photo.id && loadingPhoto}\r\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\r\n                                                />\r\n                                                <Button\r\n                                                    name={'deletion'+photo.id}\r\n                                                    disabled={loadingPhoto || photo.isMain}\r\n                                                    color='red'\r\n                                                    icon='trash'\r\n                                                    onClick={e => handleSetDeletePhoto(photo, e)}\r\n                                                    loading={target==='deletion'+photo.id && loadingPhoto}\r\n                                                />\r\n                                            </Button.Group>\r\n                                        )}\r\n                                    </Card>\r\n                                ))}\r\n                            </Card.Group>\r\n                    )}\r\n                </GridColumn>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Grid, Header, Image, Tab, TabProps } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { UserActivity } from '../../models/profile';\r\n\r\nconst panes = [\r\n    {menuItem: 'Future Events', pane: {key: 'future'}},\r\n    {menuItem: 'Past Events', pane: {key: 'past'}},\r\n    {menuItem: 'Hosting', pane: {key: 'hosting'}},\r\n];\r\n\r\n\r\nexport default observer( function UserActivities() {\r\n    const {profileStore: {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    }} = useStore();\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username, '');\r\n    }, [loadUserActivities, profile])\r\n\r\n    const handleTabChanging = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key)\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header content='Activities' floated='left' icon='calendar' />\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{secondary: true, pointing: true}}\r\n                        onTabChange={(e, data) => handleTabChanging(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card as={Link} to={`/activities/${activity.id}`} key={activity.id}>\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{minHeight: 100, objectFit: 'cover'}}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { Profile } from '../../models/profile';\r\nimport ProfileFollowing from './ProfileFollowing';\r\nimport ProfilePhotos from './ProfilePhotos';\r\nimport UserActivities from './UserActivities';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <Tab.Pane>About Content</Tab.Pane>},\r\n        {menuItem: 'Photos', render: () => <Tab.Pane><ProfilePhotos profile={profile}/></Tab.Pane>},\r\n        {menuItem: 'Events', render: () => <Tab.Pane><UserActivities /></Tab.Pane>},\r\n        {menuItem: 'Followers', render: () => <Tab.Pane><ProfileFollowing /></Tab.Pane>},\r\n        {menuItem: 'Following', render: () => <Tab.Pane><ProfileFollowing /></Tab.Pane>}\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n            menu={{fluid: true, vertical:true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Divider, Grid, Header, Image, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={3}>\r\n                    <Image src={profile.image || '/assets/user.png'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={9}>\r\n                    <Header size='huge' content={profile.displayName}/>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingsCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './PorfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{username: string}>();\r\n    const { profileStore: {loadingProfile, profile, loadProfile, setActiveTab} } = useStore();\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => setActiveTab(0);\r\n    }, [loadProfile, username, setActiveTab]);\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading Profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile && <ProfileHeader profile={profile}/>}\r\n                {profile && <ProfileContent profile={profile}/>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Componet, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Componet {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivitiyDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivitiesDetails from '../../features/activities/dtails/ActivityDetails';\nimport TestErrors from '../../features/errors/TestErrors';\nimport {ToastContainer} from 'react-toastify'\nimport Notfound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const { userStore, commonStore } = useStore();\n\n   useEffect(() => { // watch proper change and react with action in component\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n   }, [userStore, commonStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content=\"Loading App...\" />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n          <NavBar />\n          <Container style={{margin: '7em'}}>\n            <Switch>\n              <PrivateRoute exact path='/activities' component={ActivityDashboard} /> {/*exact for /a when there is a/id */}\n              <PrivateRoute path='/activities/:id' component={ActivitiesDetails} />\n              <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n              <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n              <PrivateRoute path='/errors' component={TestErrors} />\n              <Route path='/server-error' component={ServerError} />\n              <Route component={Notfound} />\n            </Switch>\n          </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './app/layout/style.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}